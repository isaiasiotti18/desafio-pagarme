// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum CardType {
  debit_card
  credit_card
}

enum PayableStatus {
  pending
  paid
  waiting_funds
}

model Client {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String   @unique @db.VarChar(50)
  cnpj             String   @unique @db.VarChar(20)
  email            String   @unique @db.VarChar(50)
  password         String   @db.VarChar(100)
  availableBalance Decimal  @default(0) @db.Money
  waitingFunds     Decimal  @default(0) @db.Money
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  transaction Transaction[]
  payable     Payable[]
}

model Customer {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String          @db.VarChar(50)
  cpf           String          @unique @db.VarChar(16)
  email         String          @unique @db.VarChar(50)
  password      String          @db.VarChar(100)
  created_at    DateTime        @default(now())
  updated_at    DateTime        @default(now())
  paymentMethod PaymentMethod[]
  transaction   Transaction[]
}

model PaymentMethod {
  paymentMethodId       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  cardType              CardType
  cardNumber            String   @unique @db.VarChar(50)
  cardHolderName        String   @db.VarChar(25)
  validThru             String   @db.VarChar(10)
  cardVerificationValue Int      @unique @db.SmallInt

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @db.Uuid

  transaction Transaction[]
}

model Transaction {
  transactionId String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value         Decimal @db.Money
  description   String  @default("No description")

  payable Payable?

  customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?   @db.Uuid

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String? @db.Uuid

  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [paymentMethodId])
  paymentMethodId String?        @db.Uuid
}

model Payable {
  payableId   String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  value       Decimal       @db.Money
  status      PayableStatus
  paymentDate DateTime      @db.Date
  fee         Int

  transaction   Transaction @relation(fields: [transactionId], references: [transactionId])
  transactionId String      @unique @db.Uuid

  client   Client? @relation(fields: [clientId], references: [id])
  clientId String? @db.Uuid
}
